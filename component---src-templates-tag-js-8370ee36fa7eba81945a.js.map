{"version":3,"sources":["webpack:///./src/templates/tag.js","webpack:///./src/components/SEO/index.js","webpack:///./src/api/images.js","webpack:///./src/components/Tag/index.js","webpack:///./src/components/Card/index.js"],"names":["TagPage","_ref","data","pageContext","edges","allMarkdownRemark","tag","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","style","fontSize","margin","length","map","_ref2","node","_components_Card__WEBPACK_IMPORTED_MODULE_2__","Object","assign","frontmatter","key","id","_components_SEO__WEBPACK_IMPORTED_MODULE_3__","title","url","siteTitleAlt","isPost","description","image","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","prop_types__WEBPACK_IMPORTED_MODULE_2__","prop_types__WEBPACK_IMPORTED_MODULE_2___default","_data__WEBPACK_IMPORTED_MODULE_3__","_data__WEBPACK_IMPORTED_MODULE_3___default","SEO","name","content","type","JSON","stringify","@context","@type","alternateName","itemListElement","position","item","@id","headline","schemaOrgJSONLD","property","config","siteFBAppID","twitter_username","propTypes","PropTypes","string","isRequired","bool","defaultProps","parseImgur","rawImage","size","match","resizedImage","replace","small-square","big-square","small","medium","large","huge","parseImageTag","href","text","parseTitle","module","exports","getGalleryImage","Tag","count","oneOfType","number","CardHeader","headerImage","color","backgroundColor","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","backgroundImage","Card","date","headerBackgroundColor","tags","split","_Tag__WEBPACK_IMPORTED_MODULE_4__","arrayOf"],"mappings":"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","file":"component---src-templates-tag-js-8370ee36fa7eba81945a.js","sourcesContent":["import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Card from '../components/Card';\r\nimport SEO from '../components/SEO';\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst TagPage = ({ data, pageContext }) => {\r\n  const { edges } = data.allMarkdownRemark;\r\n  const { tag } = pageContext;\r\n  return (\r\n    <div className=\"container\">\r\n      <div\r\n        className=\"row\"\r\n        style={{\r\n          fontSize: 20,\r\n          margin: 15,\r\n        }}\r\n      >\r\n        {edges.length}\r\n        &nbsp;Articles in&nbsp;\r\n        {tag}\r\n      </div>\r\n\r\n      {edges.map(({ node }) => (\r\n        <Card {...node.frontmatter} key={node.id} />\r\n      ))}\r\n\r\n      <SEO\r\n        title={tag}\r\n        url={`/tag/${tag}`}\r\n        siteTitleAlt=\"Calpa's Blog\"\r\n        isPost={false}\r\n        description={tag}\r\n        image=\"https://i.imgur.com/M795H8A.jpg\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query tagQuery($tag: [String!]) {\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: frontmatter___date }\r\n      filter: { frontmatter: { tags: { in: $tag } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            id\r\n            url: slug\r\n            title\r\n            date\r\n            tags\r\n            headerImage\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport config from '../../../data';\r\n\r\nconst schemaOrgJSONLD = ({\r\n  url,\r\n  title,\r\n  siteTitleAlt,\r\n  isPost,\r\n  image,\r\n  description,\r\n}) => [\r\n  {\r\n    '@context': 'http://schema.org',\r\n    '@type': 'WebSite',\r\n    url,\r\n    name: title,\r\n    alternateName: siteTitleAlt || '',\r\n  },\r\n  isPost\r\n    ? {\r\n      '@context': 'http://schema.org',\r\n      '@type': 'BreadcrumbList',\r\n      itemListElement: [\r\n        {\r\n          '@type': 'ListItem',\r\n          position: 1,\r\n          item: {\r\n            '@id': url,\r\n            name: title,\r\n            image,\r\n          },\r\n        },\r\n      ],\r\n    }\r\n    : '',\r\n  isPost\r\n    ? {\r\n      '@context': 'http://schema.org',\r\n      '@type': 'BlogPosting',\r\n      url,\r\n      name: title,\r\n      alternateName: siteTitleAlt || '',\r\n      headline: title,\r\n      image: {\r\n        '@type': 'ImageObject',\r\n        url: image,\r\n      },\r\n      description,\r\n    }\r\n    : '',\r\n];\r\n\r\nconst SEO = ({\r\n  url, title, description, image, siteTitleAlt, isPost,\r\n}) => (\r\n  <Helmet>\r\n    <title>{title}</title>\r\n\r\n    {/* General tags */}\r\n    <meta name=\"description\" content={description} />\r\n    <meta name=\"image\" content={image} />\r\n\r\n    {/* Schema.org tags */}\r\n    <script type=\"application/ld+json\">\r\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\r\n    </script>\r\n\r\n    {/* OpenGraph tags */}\r\n    <meta property=\"og:url\" content={url} />\r\n    {isPost ? (\r\n      <meta property=\"og:type\" content=\"article\" />\r\n    ) : (\r\n      <meta property=\"og:type\" content=\"website\" />\r\n    )}\r\n    <meta property=\"og:title\" content={title} />\r\n    <meta property=\"og:description\" content={description} />\r\n    <meta property=\"og:image\" content={image} />\r\n    <meta\r\n      property=\"fb:app_id\"\r\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\r\n    />\r\n\r\n    {/* Twitter Card tags */}\r\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n    <meta\r\n      name=\"twitter:creator\"\r\n      content={config.twitter_username ? config.twitter_username : ''}\r\n    />\r\n    <meta name=\"twitter:title\" content={title} />\r\n    <meta name=\"twitter:description\" content={description} />\r\n    <meta name=\"twitter:image\" content={image} />\r\n  </Helmet>\r\n);\r\n\r\nSEO.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  image: PropTypes.string.isRequired,\r\n  siteTitleAlt: PropTypes.string.isRequired,\r\n  isPost: PropTypes.bool.isRequired,\r\n};\r\n\r\nSEO.defaultProps = {\r\n  title: config.title,\r\n};\r\n\r\nexport default SEO;\r\n","// s = Small Square (90×90)\r\n// b = Big Square (160×160)\r\n// t = Small Thumbnail (160×160)\r\n// m = Medium Thumbnail (320×320)\r\n// l = Large Thumbnail (640×640)\r\n// h = Huge Thumbnail (1024×1024)\r\nconst defaultPicture = 'M795H8A.jpg';\r\n\r\nconst parseImgur = (rawImage, size = 'large') => {\r\n  if (!rawImage) {\r\n    return `https://i.imgur.com/${defaultPicture}`;\r\n  }\r\n\r\n  const mapping = {\r\n    'small-square': 's',\r\n    'big-square': 'b',\r\n    small: 't',\r\n    medium: 'm',\r\n    large: 'l',\r\n    huge: 'h',\r\n  };\r\n\r\n  // Don't resize the png image\r\n  // as there is a transparent bug in imgur\r\n  if (rawImage.match('(png)|(gif)')) {\r\n    // Prevent double http url\r\n    if (rawImage.match('http')) {\r\n      return rawImage;\r\n    }\r\n    return `https://i.imgur.com/${rawImage}`;\r\n  }\r\n\r\n  const resizedImage = rawImage.replace(/(.*)\\.(.*)/, `$1${mapping[size]}.$2`);\r\n  // Prevent double http url\r\n  if (resizedImage.match('http')) {\r\n    return resizedImage;\r\n  }\r\n  return `https://i.imgur.com/${resizedImage}`;\r\n};\r\n\r\nconst parseTitle = (title, text) => `title=\"${title || text}\"`;\r\n\r\nconst parseImageTag = ({ href, title, text }) => `<img class=\"lozad d-block mx-auto\" data-src=${parseImgur(\r\n  href,\r\n  'large',\r\n)} ${parseTitle(title, text)} />`;\r\n\r\nconst getGalleryImage = ({ href, title, text }) => `<a data-fancybox=\"gallery\" href=\"${parseImgur(\r\n  href,\r\n  'huge',\r\n)}\">${parseImageTag({ href, title, text })}</a>`;\r\n\r\nmodule.exports = {\r\n  parseImgur,\r\n  parseImageTag,\r\n  getGalleryImage,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Tag = ({ name, count }) => (\r\n  <a href={`/tag/${name}`} className=\"header-tag\">\r\n    {name}\r\n    &nbsp;\r\n    {count}\r\n  </a>\r\n);\r\n\r\nTag.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nTag.defaultProps = {\r\n  count: '',\r\n};\r\n\r\nexport default Tag;\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Tag from '../Tag';\r\n\r\nimport { parseImgur } from '../../api/images';\r\n\r\nimport './index.scss';\r\n\r\nconst imageStyle = (headerImage, color) => ({\r\n  backgroundColor: `#${color}`,\r\n  backgroundImage: ` url(${parseImgur(headerImage, 'large')})`,\r\n});\r\n\r\nconst CardHeader = ({ url, image, backgroundColor }) => (\r\n  <Link to={url} href={url}>\r\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\r\n  </Link>\r\n);\r\n\r\nconst Card = ({\r\n  title,\r\n  date,\r\n  url,\r\n  headerImage,\r\n  headerBackgroundColor,\r\n  description,\r\n  tags,\r\n}) => (\r\n  <div className=\"col-sm-12 pb-4\">\r\n    <div className=\"custom-card\">\r\n      {headerImage && (\r\n        <CardHeader\r\n          url={url}\r\n          image={headerImage}\r\n          backgroundColor={headerBackgroundColor}\r\n        />\r\n      )}\r\n      <div className=\"data\">\r\n        <div className=\"content\">\r\n          <div className=\"stats\">\r\n            <span className=\"date\">{date.split('T')[0]}</span>\r\n            {tags.map(name => (\r\n              <Tag name={name} key={name} />\r\n            ))}\r\n          </div>\r\n          <Link to={url} href={url}>\r\n            <h4 className=\"title\">{title}</h4>\r\n          </Link>\r\n          <p>{description}</p>\r\n          <Link to={url} href={url}>\r\n            ....繼續閱讀全文內容\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  date: PropTypes.string,\r\n  url: PropTypes.string.isRequired,\r\n  headerImage: PropTypes.string,\r\n  headerBackgroundColor: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  tags: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nCardHeader.propTypes = Card.propTypes;\r\n\r\nCard.defaultProps = {\r\n  headerImage: '',\r\n  tags: [],\r\n  date: '',\r\n  headerBackgroundColor: '',\r\n};\r\n\r\nexport default Card;\r\n"],"sourceRoot":""}